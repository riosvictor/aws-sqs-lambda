service: sls-sqs-ts-example
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  httpApi:
    cors: true
  environment:
    QUEUE_URL: ${self:custom.queueUrl}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_SESSION_TOKEN: ${env:AWS_SESSION_TOKEN}
    AWS_REGION: ${aws:region}

functions:
  producer:
    handler: ./src/producer.handler
    events:
      - httpApi:
          path: /producer
          method: post
  consumer:
    handler: ./src/consumer.handler
    events:
      - sqs:
          arn: arn:aws:sqs:${aws:region}:${env:AWS_ACCOUNT_ID}:${env:QUEUE_NAME}
          batchSize: 1
          maximumBatchingWindow: 30
          functionResponseType: ReportBatchItemFailures
  consumer-dlq:
    handler: ./src/consumer-dlq.handler
    events:
      - sqs:
          arn: arn:aws:sqs:${aws:region}:${env:AWS_ACCOUNT_ID}:${env:QUEUE_NAME_DLQ}
          batchSize: 1
          maximumBatchingWindow: 30
          functionResponseType: ReportBatchItemFailures

custom:
  esbuild:
    minify: false
    sourcemap: linked
    watch:
      pattern: "src/**/*.ts"
      ignore: "node_modules/**/*"
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2024-01-10'
    endpoint: ${env:QUEUE_HOST_URL}
    region: ${self:provider.region}
    accessKeyId: ${env:AWS_ACCESS_KEY_ID}
    secretAccessKey: ${env:AWS_SECRET_ACCESS_KEY}
    skipCacheInvalidation: false
  queueUrl: ${env:QUEUE_HOST_URL}/${env:AWS_ACCOUNT_ID}/${env:QUEUE_NAME}

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline-sqs
  - serverless-offline
